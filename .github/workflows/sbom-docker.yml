name: Build and Analyze SBOM

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  generate-sbom:
    name: Generate SBOM, Build Docker Image, and Analyze
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      # Step 3: Install dependencies
      - name: Install NPM dependencies
        run: npm install

      # Step 4: Generate SBOM for Javascript using Anchore's SBOM Action
      - name: Generate SBOM for Node.js
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          artifact-name: sbom-node-js.json

      # Step 5: Build Docker image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: docker.io
          repository: ${{ secrets.DOCKER_USERNAME }}/cd
          tags: ${{ github.sha }}

      # Step 6: Generate SBOM for Docker image
      - name: Generate SBOM for Docker image
        uses: anchore/sbom-action@v0
        with:
          image: ${{ secrets.DOCKER_USERNAME }}/cd:${{ github.sha }}
          format: spdx-json
          artifact-name: sbom-docker-image.json

      # Step 7: SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.3.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"
        with:
          args: >
            -Dsonar.projectKey=ayrayane_cd
            -Dsonar.organization=ayrayane

      # Step 8: Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'docker.io/${{ secrets.DOCKER_USERNAME }}/cd:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: false
          vuln-type: 'os,library'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      # Step 9: Dependency Check using depcheck
      - name: Dependency Check
        run: |
          npm install -g depcheck
          # Génère un fichier texte avec les résultats
          depcheck . > depcheck-report.txt || true

      # Step 10: Archive dependency check report
      - name: Archive dependency check report
        uses: actions/upload-artifact@v4
        with:
          name: depcheck-report
          path: depcheck-report.txt
